package com.ce.ratechange.batch;

import com.misys.cbs.common.util.log.CBSLogger;
import com.misys.fbe.common.util.CommonUtil;
import com.trapedza.bankfusion.batch.fatom.AbstractPersistableFatomContext;
import com.trapedza.bankfusion.batch.process.AbstractBatchProcess;
import com.trapedza.bankfusion.batch.process.AbstractProcessAccumulator;
import com.trapedza.bankfusion.bo.refimpl.IBOCE_LEN_KfwRefinanceRateHistory;
import com.trapedza.bankfusion.bo.refimpl.IBOCE_LEN_RefinanceRateChangeTag;
import com.trapedza.bankfusion.bo.refimpl.IBOCreditInterestFeature;
import com.trapedza.bankfusion.bo.refimpl.IBOInterestBaseCode;
import com.trapedza.bankfusion.bo.refimpl.IBOUB_CMN_BatchProcessLog;
import com.trapedza.bankfusion.bo.refimpl.IBOUDFEXTAttributeCollectionFeature;
import com.trapedza.bankfusion.core.SimplePersistentObject;
import com.trapedza.bankfusion.core.SystemInformationManager;
import com.trapedza.bankfusion.persistence.core.IPersistenceObjectsFactory;
import com.trapedza.bankfusion.servercommon.core.BankFusionThreadLocal;
import com.trapedza.bankfusion.utils.GUIDGen;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

public class RefinanceRateChangeProcess extends AbstractBatchProcess {
  private static final String UDF_INTERPOLATEDRATE = "UDF_INTERPOLATEDRATE";
  
  IPersistenceObjectsFactory factory;
  
  private RefinanceRateChangeAccumulator accumulator;
  
  private RefinanceRateChangeContext context;
  
  private CBSLogger LOGGER = new CBSLogger(RefinanceRateChangeProcess.class.getName());
  
  public RefinanceRateChangeProcess(AbstractPersistableFatomContext context) {
    super(context);
    BankFusionThreadLocal.getBankFusionEnvironment();
    this.context = (RefinanceRateChangeContext)context;
  }
  
  public AbstractProcessAccumulator getAccumulator() {
    return this.accumulator;
  }
  
  public void init() {
    initialiseAccumulator();
  }
  
  protected void initialiseAccumulator() {
    Object[] acc = new Object[0];
    this.accumulator = new RefinanceRateChangeAccumulator(acc);
  }
  
  public AbstractProcessAccumulator process(int pageToProcess) {
    this.LOGGER.info("process()", "Testbatchprocess started");
    this.context = this.context;
    this.pagingData.setCurrentPageNumber(pageToProcess);
    int pageSize = this.context.getPageSize();
    int fromValue = (pageToProcess - 1) * pageSize + 1;
    int toValue = pageToProcess * pageSize;
    this.LOGGER.info("Process", "\n" + fromValue + " ----- " + toValue);
    this.factory = BankFusionThreadLocal.getPersistanceFactory();
    String query = " WHERE f_RowSeq BETWEEN ? AND ? ";
    ArrayList<Integer> parameters = new ArrayList<>();
    parameters.add(Integer.valueOf(fromValue));
    parameters.add(Integer.valueOf(toValue));
    List reFinanceTagRecords = BankFusionThreadLocal.getPersistanceFactory()
      .findByQuery("CE_LEN_RefinanceRateChangeTag", query, parameters, null);
    if (CommonUtil.checkIfNotNullOrEmpty(reFinanceTagRecords)) {
      BankFusionThreadLocal.setCurrentPageRecordIDs(reFinanceTagRecords);
      for (IBOCE_LEN_RefinanceRateChangeTag reFinanceTag : reFinanceTagRecords) {
        try {
          handleConditionalProcessing(reFinanceTag);
        } catch (Exception e) {
          e.printStackTrace();
          createLogMessage(e.getMessage(), reFinanceTag);
          reFinanceTag.setF_Status("E");
        } 
      } 
    } 
    this.factory = BankFusionThreadLocal.getPersistanceFactory();
    return this.accumulator;
  }
  
  private void createLogMessage(String message, IBOCE_LEN_RefinanceRateChangeTag reFinanceTag) {
    IBOUB_CMN_BatchProcessLog batchException = (IBOUB_CMN_BatchProcessLog)this.factory.getStatelessNewInstance("UB_CMN_BatchProcessLog");
    batchException.setBoID(GUIDGen.getNewGUID());
    batchException.setF_PROCESSNAME(this.context.getBatchProcessName());
    batchException.setF_RUNDATETIME(SystemInformationManager.getInstance().getBFBusinessDateTime());
    batchException.setF_RECORDID(reFinanceTag.getBoID());
    boolean isReversed = reFinanceTag.isF_IsReversed();
    message = isReversed ? ("While Updating Credit Interest : " + message) : ("While Reverting value of Basecode and margin from History" + message);
    batchException.setF_ERRORMESSAGE(message);
    batchException.setF_STATUS("E");
    this.factory.create("UB_CMN_BatchProcessLog", (SimplePersistentObject)batchException);
  }
  
  private void handleConditionalProcessing(IBOCE_LEN_RefinanceRateChangeTag reFinanceTag) {
    if (!reFinanceTag.isF_IsReversed()) {
      IBOUDFEXTAttributeCollectionFeature hostExtn = (IBOUDFEXTAttributeCollectionFeature)this.factory
        .findByPrimaryKey("UDFEXTAttributeCollectionFeature", reFinanceTag.getBoID(), 
          Boolean.TRUE.booleanValue());
      BigDecimal interpolatedRate = new BigDecimal(0);
      if (hostExtn.getValueOfCustomField("UDF_INTERPOLATEDRATE") != null)
        interpolatedRate = (BigDecimal)hostExtn.getValueOfCustomField("UDF_INTERPOLATEDRATE"); 
      updateCreditInterestRate(reFinanceTag.getBoID(), interpolatedRate);
      reFinanceTag.setF_Status("P");
    } else {
      IBOCE_LEN_KfwRefinanceRateHistory kfwRefinanceRateHistory = 
        (IBOCE_LEN_KfwRefinanceRateHistory)BankFusionThreadLocal.getPersistanceFactory().findByPrimaryKey("CE_LEN_KfwRefinanceRateHistory", 
          reFinanceTag.getBoID(), Boolean.TRUE.booleanValue());
      revertValueOfRateFromHistory(reFinanceTag.getBoID(), kfwRefinanceRateHistory.getF_BaseCode(), 
          kfwRefinanceRateHistory.getF_Margin());
      kfwRefinanceRateHistory.setF_IsReversed(true);
      kfwRefinanceRateHistory.setF_RECLASTMODIFIEDDATE(SystemInformationManager.getInstance().getBFBusinessDateTime());
      reFinanceTag.setF_Status("P");
    } 
  }
  
  private void updateCreditInterestRate(String accountID, BigDecimal creditInterestRate) {
    IBOCreditInterestFeature iboCreditInterestFeature = 
      (IBOCreditInterestFeature)BankFusionThreadLocal.getPersistanceFactory().findByPrimaryKey("CreditInterestFeature", accountID, Boolean.TRUE.booleanValue());
    iboCreditInterestFeature.setF_CREDITINTERESTRATE(creditInterestRate);
    iboCreditInterestFeature.setF_CREDITBASECODE(null);
    iboCreditInterestFeature.setF_CREDITINTERESTMARGIN(BigDecimal.ZERO);
    this.LOGGER.info("updateCreditInterestRate()", "CreditInterestRate is Updated with the value of Interpolated Rate");
  }
  
  private void revertValueOfRateFromHistory(String accountID, String baseCode, BigDecimal margin) {
    IBOCreditInterestFeature iboCreditInterestFeature = 
      (IBOCreditInterestFeature)BankFusionThreadLocal.getPersistanceFactory().findByPrimaryKey("CreditInterestFeature", accountID, Boolean.TRUE.booleanValue());
    iboCreditInterestFeature.setF_CREDITINTERESTRATE(getBaseCode(baseCode));
    iboCreditInterestFeature.setF_CREDITBASECODE(baseCode);
    iboCreditInterestFeature.setF_CREDITINTERESTMARGIN(margin);
    this.LOGGER.info("revertValueOfRateFromHistory()", "Base Code and Margin is reverted from Refinance Rate Change History Table");
  }
  
  private BigDecimal getBaseCode(String baseCode) {
    BigDecimal baseCodeRate = BigDecimal.ZERO;
    IBOInterestBaseCode interestBaseCodeDtl = (IBOInterestBaseCode)BankFusionThreadLocal.getPersistanceFactory().findByPrimaryKey("InterestBaseCode", baseCode, true);
    if (interestBaseCodeDtl != null) {
      baseCodeRate = interestBaseCodeDtl.getF_INTRATE();
      this.LOGGER.info("getBaseCode()", "Base Code Rate fetched Rate value - " + baseCodeRate + " Base Code - " + baseCode);
    } else {
      this.LOGGER.info("getBaseCode()", "Base Code not found in the Table - BaseCode - " + baseCode);
    } 
    return baseCodeRate;
  }
}
