package com.ce.ratechange.batch;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import com.misys.cbs.common.util.log.CBSLogger;
import com.trapedza.bankfusion.batch.fatom.AbstractFatomContext;
import com.trapedza.bankfusion.batch.services.BatchService;
import com.trapedza.bankfusion.bo.refimpl.IBOCE_LEN_RefinanceRateChangeTag;
import com.trapedza.bankfusion.core.SystemInformationManager;
import com.trapedza.bankfusion.persistence.core.IPersistenceObjectsFactory;
import com.trapedza.bankfusion.servercommon.commands.BankFusionEnvironment;
import com.trapedza.bankfusion.servercommon.core.BankFusionThreadLocal;
import com.trapedza.bankfusion.servercommon.services.IServiceManager;
import com.trapedza.bankfusion.servercommon.services.ServiceManager;
import com.trapedza.bankfusion.servercommon.services.ServiceManagerFactory;
import com.trapedza.bankfusion.steps.refimpl.AbstractCE_LEN_RefinanceRateChange;

public class RefinanceRateChangeFatom extends AbstractCE_LEN_RefinanceRateChange {

	private static String CLASS_NAME = RefinanceRateChangeFatom.class.getName();
	private static CBSLogger LOGGER = new CBSLogger(CLASS_NAME);
	private RefinanceRateChangeContext Context;
	private IPersistenceObjectsFactory factory;

	protected AbstractFatomContext getFatomContext() {
		return (AbstractFatomContext) new RefinanceRateChangeContext();
	}

	@SuppressWarnings("deprecation")
	public RefinanceRateChangeFatom(BankFusionEnvironment env) {
		super(env);
		this.factory = BankFusionThreadLocal.getPersistanceFactory();
	}

	@SuppressWarnings("rawtypes")
	protected Map getInDataMap() {
		return new HashMap<>();
	}

	protected void processBatch(BankFusionEnvironment env, AbstractFatomContext context) {
		this.Context = (RefinanceRateChangeContext) context;
		try {
			tagTableInsert(env);
			@SuppressWarnings("unused")
			boolean status = false;
			IServiceManager sm = ServiceManagerFactory.getInstance().getServiceManager();
			BatchService service = (BatchService) sm.getServiceForName(ServiceManager.BATCH_SERVICE);
			if (service.runBatch(env, (AbstractFatomContext) this.Context)) {
				status = Boolean.TRUE;
			} else {
				status = Boolean.FALSE;
			}
		} catch (Exception e) {
			e.getStackTrace();
			LOGGER.info("RefinanceRateChangeFatom()", "Batch fatom Failed - " + e.getMessage());
		}
	}

	@SuppressWarnings("deprecation")
	private void tagTableInsert(BankFusionEnvironment env) {
		try {
			Connection connection;
			connection = BankFusionThreadLocal.getPersistanceFactory().getJDBCConnection();
			BankFusionThreadLocal.getPersistanceFactory().bulkDeleteAll(IBOCE_LEN_RefinanceRateChangeTag.BONAME);
			String currentBusinessDateAsString = "TO_DATE('"
					+ SystemInformationManager.getInstance().getBFBusinessDateAsString() + "','YYYY-MM-DD')";
			String businessDateAndTimeFormatted = "TO_DATE('"
					+ SystemInformationManager.getInstance().getBFBusinessDateTimeAsString()
					+ "','YYYY-MM-DD HH24:MI:SS')";
			String createdBy = env.getUserID();
			String sysDate = "TO_DATE('" + SystemInformationManager.getInstance().getBFSystemDateTimeAsString()
					+ " ','YYYY-MM-DD HH24:MI:SS')";
			String tagInsert = "INSERT INTO CUSTOMEXTN.CETB_REFINANCERATECHANGETAG "
					+ "(ROWSEQ, ACCOUNTIDPK, FIEXEDRATE, BASECODE, MARGIN, ISREVERSED, VERSIONNUM) "
					+ "SELECT ROW_NUMBER() OVER (ORDER BY ACC.ACCOUNTID) AS SEQNUMBER, "
					+ "ACC.ACCOUNTID, CINT.CREDITINTERESTRATE, CINT.CREDITBASECODE, CINT.CREDITINTERESTMARGIN, "
					+ "'N', 0 " + "FROM WASADMIN.ACCOUNT ACC "
					+ "JOIN WASADMIN.CREDITINTEREST CINT ON ACC.ACCOUNTID = CINT.ACCOUNTID "
					+ "JOIN WASADMIN.UBTB_ACCOUNT_UD ACC_UD ON ACC_UD.ACCOUNTID = ACC.ACCOUNTID "
					+ "WHERE ACC_UD.UDF_INFLOWDATE = " + currentBusinessDateAsString + "AND ACC_UD.UDF_INTERPOLATEDRATE IS NOT NULL"
					+ "AND ACC.ACCOUNTID NOT IN (SELECT ACCOUNTIDPK FROM CUSTOMEXTN.CETB_KFWREFINANCERATEHISTORY) "
					+ "UNION ALL " + "SELECT ROW_NUMBER() OVER (ORDER BY HIS.ACCOUNTIDPK) AS SEQNUMBER, "
					+ "HIS.ACCOUNTIDPK, HIS.FIXEDRATE, HIS.BASECODE, HIS.MARGIN, 'Y', 0 "
					+ "FROM CUSTOMEXTN.CETB_KFWREFINANCERATEHISTORY HIS "
					+ "JOIN WASADMIN.CREDITINTEREST CINT ON HIS.ACCOUNTIDPK = CINT.ACCOUNTID "
					+ "WHERE HIS.ISREVERSED = 'N' " + "AND CINT.UBNEXTINTERESTAPPLICATIONDTTM = "
					+ businessDateAndTimeFormatted;

			String historyInsertQuery = "INSERT INTO CUSTOMEXTN.CETB_KFWREFINANCERATEHISTORY "
					+ "(ISREVERSED, RECCREATEDON, ACCOUNTIDPK, RECLASTMODIFIEDDATE, RECCREATEDBY, VERSIONNUM, MARGIN, RECSYSDATE, BASECODE, FIXEDRATE, RECAPPROVEDBY, RECLASTMODIFIEDBY) "
					+ "SELECT 'N', '" + businessDateAndTimeFormatted + "', TAG.ACCOUNTIDPK, '"
					+ businessDateAndTimeFormatted + "', '" + createdBy + "', 0, TAG.MARGIN, '" + sysDate
					+ "', TAG.BASECODE, TAG.FIEXEDRATE, NULL, NULL "
					+ "FROM CUSTOMEXTN.CETB_REFINANCERATECHANGETAG TAG " + "WHERE TAG.ISREVERSED != 'Y';";
			PreparedStatement ps1 = connection.prepareStatement(tagInsert);
			PreparedStatement ps2 = connection.prepareStatement(historyInsertQuery);
			ps1.executeUpdate();
			ps2.executeUpdate();
			BankFusionThreadLocal.getPersistanceFactory().commitTransaction();
			BankFusionThreadLocal.getPersistanceFactory().beginTransaction();
			LOGGER.info("tagTableInsert()", "Inserted successfully");
			LOGGER.info("HistoryTableInsert", "Inserted Successfully");
			;
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	protected void setOutputTags(AbstractFatomContext arg0) {

	}
}
